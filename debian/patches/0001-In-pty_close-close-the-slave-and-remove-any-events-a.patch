Description: In pty_close() close the slave and remove any events associated
 with it.  Fixes a potential hang when performing the final flush
 on non-BSD systems.

Author: Todd C. Miller <Todd.Miller@sudo.ws>
Origin: backport, https://github.com/sudo-project/sudo/commit/4df454310dae
Bug-ubuntu: https://bugs.launchpad.net/bugs/1895757
--- a/src/exec_pty.c
+++ b/src/exec_pty.c
@@ -680,12 +680,19 @@
 }
 
 static void
-pty_close(struct command_status *cstat)
+pty_close(struct sudo_event_base *evbase, struct command_status *cstat)
 {
     struct io_buffer *iob;
     int n;
     debug_decl(pty_close, SUDO_DEBUG_EXEC);
 
+    /* Close the pty slave first so reads from the master don't block. */
+    if (io_fds[SFD_SLAVE] != -1) {
+	ev_free_by_fd(evbase, io_fds[SFD_SLAVE]);
+	close(io_fds[SFD_SLAVE]);
+	io_fds[SFD_SLAVE] = -1;
+    }
+
     /* Flush any remaining output (the plugin already got it). */
     if (io_fds[SFD_USERTTY] != -1) {
 	n = fcntl(io_fds[SFD_USERTTY], F_GETFL, 0);
@@ -713,6 +720,11 @@
     /* Update utmp */
     if (utmp_user != NULL)
 	utmp_logout(slavename, cstat->type == CMD_WSTATUS ? cstat->val : 0);
+
+    /* Close pty master. */
+    if (io_fds[SFD_MASTER] != -1)
+	close(io_fds[SFD_MASTER]);
+
     debug_return;
 }
 
@@ -1409,7 +1421,7 @@
     }
 
     /* Flush any remaining output, free I/O bufs and events, do logout. */
-    pty_close(cstat);
+    pty_close(ec.evbase, cstat);
 
     /* Free things up. */
     free_exec_closure_pty(&ec);
@@ -1509,6 +1521,8 @@
 	    }
 	}
     }
+    sudo_debug_printf(SUDO_DEBUG_INFO,
+	"%s: flushing remaining I/O buffers (nonblocking)", __func__);
     (void) sudo_ev_loop(evbase, SUDO_EVLOOP_NONBLOCK);
 
     /*
@@ -1534,6 +1548,8 @@
 		}
 	    }
 	}
+	sudo_debug_printf(SUDO_DEBUG_INFO,
+	    "%s: flushing remaining write buffers (blocking)", __func__);
 	(void) sudo_ev_loop(evbase, 0);
      
 	/* We should now have flushed all write buffers. */
